#투포인터
def reverseString(self,s:list[str])->None:#List[str]는 "문자열 리스트"
    left,right=0,len[s]-1
    while left<right:
        s[left],s[right]=s[right],s[left]
        left+=1
        right-=1
#파이썬에서 s[left], s[right] = s[right], s[left]와 같이 두 변수의 값을 바꿀 수 있는 이유는 파이썬에서 이를 지원하기 위한 특별한 문법적 지원이 있기 때문입니다. 이렇게 하면 중간 변수를 사용하지 않고도 값을 교환할 수 있습니다.
#이 기능은 파이썬의 "병행 할당" 또는 "패킹과 언패킹"이라고도 합니다. 오른쪽에 있는 튜플 (s[right], s[left])은 한 번에 두 변수의 값을 포함하는 임시 튜플을 만들게 됩니다. 그리고 그 임시 튜플의 값들이 왼쪽의 변수들에 언패킹되어 할당됩니다.
#이렇게 하면 임시 변수를 만들지 않고도 두 변수의 값을 교환할 수 있어 코드가 간결해지고, 임시 변수를 사용하는 것보다도 빠르게 작동할 수 있습니다. 파이썬의 병행 할당은 코드를 더 읽기 쉽고 유지 보수하기 쉽게 만들어줍니다.

#파이썬다운 방식
def reverseString2(self,s:list[str])->None:
    s.reverse()#reverse()는 리스트에만 제공된다. 

#슬라이싱
s="hello"
s=s[::-1]#그러나 이 풀이는 리트코드에서는 오류가 발생한다. 공간복잡도를 O(1)로 제한해서 제약.

#이런 트릭을 쓰면 동작한다. 
s[:]=s[::-1]
#리트코드에서 제공하는 트릭인 s[:]=s[::-1]은 s의 내용을 직접 뒤집는 것이 아니라, 이미 할당된 메모리 내에서 문자열을 뒤집는 방식으로 동작합니다. 이로써 원래 문자열 s에 저장된 문자열을 역순으로 뒤집고, 동시에 공간복잡도를 O(1)로 유지할 수 있습니다.
